---
title: "Class 12: Transcriptomics & Analysis of RNA-Seq Data"
author: "Elena"
format: gfm
editor: visual
toc: TRUE
---

# Bioconductor and DESeq2 setup

```{r, message=FALSE}
library(BiocManager)
library(DESeq2)
```

# Import countData and colData

We need at least two things:

-   count data (genes in rows and experiments in cols)

-   metadata (aka. `colData`)

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

## Check data structure

```{r}
head(counts)
```

```{r}
head(metadata)
```

We can use the `==` to test for equality - is the right side equal to the left side (T/F). We can use the `all` function to check if all the inputs are T.

```{r}
all(colnames(counts) == metadata$id)
```

## Q1. How many genes are in this dataset?

38694 genes.

```{r}
nrow(counts)
```

## Q2. How many 'control' cell lines do we have?

4 control cell lines.

```{r}
table(metadata$dex)
```

# Toy differential gene expression

```{r}
control.inds <- metadata$dex == "control"
control.ids <- metadata[control.inds,"id"]
control.counts <- counts[,control.ids]
head(control.counts)
```

```{r}
#We want a mean value across these rows (i.e. a mean count per gene)
control.mean <- rowMeans(control.counts)
head(control.mean)
```

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums(control.counts)/4 
head(control.mean)
```

```{r, message=FALSE}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

```{r}
length(which("control"==metadata$dex))
```

## Q3. How would you make the above code in either approach more robust?

Instead of dividing by 4 when calculating the control.mean, divide by the number of control samples (e.g., `length(which("control"==metadata$dex))`). Can also make the code into a function so that we can just input one variable.

## Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata %>% filter(dex=="treated")
treated.counts <- counts %>% select(treated$id) 
treated.mean <- rowSums(treated.counts)/4
head(treated.mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

## Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts, xlab="Control", ylab="Treated")
```

## Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom\_?() function would you use for this plot?

geom_point()

```{r}
library(ggplot2)
ggplot(meancounts) + 
  aes(x=control.mean,y=treated.mean) + 
  geom_point() +
  labs(x="Control", y="Treated")
```

## Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

For ggplot, `scale_x_log10()` and `scale_y_log10()`. For base R plot, `log="xy"`.

```{r}
plot(meancounts, xlab="Control", ylab="Treated", log="xy")
```

```{r}
ggplot(meancounts) + 
  aes(x=control.mean,y=treated.mean) + 
  geom_point() +
  scale_x_log10() + scale_y_log10() +
  labs(x="Control", y="Treated")
```

Adding Log2(FoldChange)

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

or...

```{r}
to.keep.inds <- rowSums(meancounts[,1:2]==0) == 0
mycounts <- meancounts[to.keep.inds,]
head(mycounts)
```

```{r}
nrow(mycounts)
```

## Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The `arr.ind=TRUE` argument returns the row and column indices where the values are True (ie. rows/columns where there are zero counts). `unique()` ensures we don't count each row twice if it has two zero entries.

```{r}
?which
```

A common threshold is 2/-2 FC.

```{r}
#How many genes are upregulated at log2(FC) of +2 or greater?
sum(mycounts$log2fc>=2)
```

## Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

250. 

```{r}
up.ind <- mycounts$log2fc > 2
sum(up.ind)
```

## Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

367. 

```{r}
down.ind <- mycounts$log2fc < (-2)
sum(down.ind)
```

## Q10. Do you trust these results? Why or why not?

No. We would need the p value to see if the fold change is statistically significant.

# DESeq2 analysis

It wants counts and colData and the "design" - aka. what to compare.

```{r, message=FALSE}
library(DESeq2)
```

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = metadata,
                              design = ~dex)
```

```{r}
dds <- DESeq(dds)
res <- results(dds)
```

```{r}
head(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

# Data Visualization

```{r}
plot( res$log2FoldChange,  res$padj, 
      xlab="Log2(FoldChange)",
      ylab="padj")
```

```{r}
#Take log of p-value
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
abline(v=c(-2,2), col="red", lty=2)
abline(h=-log(0.05), col="red", lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

# Picking up from last time... Gene annotation

```{r, message}
#BiocManager::install("AnnotationDbi")
#BiocManager::install("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
```

Databases available through "org.Hs.eg.db":

```{r}
columns(org.Hs.eg.db)
```

```{r}
head(res)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,        #The database
                     keys=row.names(res), #Our genenames
                     keytype="ENSEMBL",   #The format of our genenames
                     column="SYMBOL",     #The new format we want to add
                     multiVals="first")   #Default is the first isoform of the gene
head(res)
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,        #The database
                     keys=row.names(res), #Our genenames
                     keytype="ENSEMBL",   #The format of our genenames
                     column="ENTREZID",     #The new format we want to add
                     multiVals="first")   #Default is the first isoform of the gene
head(res)
```

## Pathway Analysis

The two main databases or gene-sets that folks often start their analyses with are GO and KEGG.

We will use the **gage** package to start with.

```{r, message=FALSE}
#BiocManager::install( c("pathview", "gage", "gageData") )
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

The main `gage()` function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

```{r}
foldchanges = res$log2FoldChange #Creating vector
names(foldchanges) = res$entrez  #Adding ENTREZ names to vector
head(foldchanges)
```

```{r}
#Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

Have a quick peek at the downregulated genes in the \$less component of our result:

```{r}
head(keggres$less,5)
```

Let's look in more detail at one of these: hsa05310 Asthma

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![The Asthma pathway with our genes](hsa05310.pathview.png)
