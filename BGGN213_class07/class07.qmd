---
title: "Class 7: Machine Learning 1"
author: "Elena"
format: gfm
editor: visual
toc: true
---

# Useful Functions

-   `rnorm()` gives set of numbers that are normally distributed

-   `c()` makes vector

-   `cbind()` combines columns

-   `kmeans()` base R function for clustering; arguments include input data and centres

# K-means Clustering

Let's make up some data to cluster.

```{r}
tmp <- c(rnorm(30,-3), rnorm(30,+3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

The function to do k-means clustering in base R is called `kmeans()`. We give this our input data for clustering and the number of clusters we want `centers`.

```{r}
km <- kmeans(x, centers = 2, nstart=20)
km
```

## Q. What 'component' of your result object details

-   cluster size?

```{r}
km$size
```

-   cluster assignment?

```{r}
km$cluster
```

-   cluster center?

```{r}
km$centers
```

## Q. Plot x coloured by the kmeans cluster assignment and add cluster centers as blue points

```{r}
plot(x, col=km$cluster)
points(km$centers,col="blue", pch=15, cex=1.5)
```

# Hierarchical Clustering

The `hclust()` function performs hierarchival clustering. The big advantace here is I don't need to tell it "k" the number of clusters...

To run `hclust()`, I need to provide a distance matrix (`dist()`) as input (not the original data!)

```{r}
hc <- hclust(dist(x))
hc
```

```{r}
plot(hc)
```

To get my "main" result (cluster membership) I want to "cut" this tree to yield "branches" whose leaves are the members of the cluster.

```{r}
cutree(hc, h=8)
```

More often, we will use `cutree()` with k=2; for example:

```{r}
grps <- cutree(hc,k=2)
```

Plot of data clustered by groups:

```{r}
plot(x, col=grps)
```

# Principal Component Analysis

## Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

Using `dim()` or `nrow()` and `ncol()`; 17 rows and 5 columns.

```{r}
#Import Data
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
dim(x)
```

```{r}
#Preview the first 6 rows
head(x)
```

```{r}
#Fixing row names
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```

```{r}
#Alternative approach
x <- read.csv(url, row.names=1)
head(x)
```

## Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

The second approach because we don't want to accidentally keep deleting the row names, which can happen with the first approach.

## Q3. Changing what optional argument in the above barplot() function results in the following plot?

`beside=FALSE`.

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
?barplot
```

```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

## Q5. Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

Plot is all possible pairwise plots, and each one corresponds to comparison between two countries. Each point corresponds to the food group (coloured by `col=rainbow(10)` with the shape `pch=16`). A straight line would indicate that the two countries have the same values for each food group.

```{r}
pairs(x, col=rainbow(10), pch=16)
```

## Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

They eat more of one food group, as indicated by the deep blue dot.

## PCA to the rescue

The main function in base R to do PCR is called `prcomp()`. One issue with the function is that it expects the transpose of our data as input i.e., it wants the countries as the rows and the food groups as the columns.

```{r}
pca <- prcomp(t(x))
summary(pca)
```

The object returned by `prcomp()` has our results that include a $x component. This is our "scores" along the PCs (i.e., the plot of our data along the new PC axis).

```{r}
#Make PCA plot
plot(pca$x[,1],pca$x[,2],
     xlab="PC1", ylab="PC2",
     col=c("orange","red","blue","darkgreen"),
     pch=16)
text(pca$x[,1], pca$x[,2], colnames(x))
```

## Variable Loadings

```{r}
#For PC1
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```
